{"ast":null,"code":"var _jsxFileName = \"/Users/wengyifan/Desktop/dsdn/dsdn/src/contracts/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  abi: contractABI\n} = require(\"./MyNFT.json\");\n\nconst contractAddress = \"0xaC76Ac9995eb52AaDA526F53333942E49eC9A206\";\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst alchemyKey = \"https://polygon-mumbai.g.alchemy.com/v2/r4_cc2y9NtTPYRpExJKFHpx_G28fzFsW\";\nconst web3 = createAlchemyWeb3(alchemyKey);\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport async function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\nexport async function mintNFT(tokenURI, contract, PUBLIC_KEY) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\"); //get latest nonce\n\n  console.log(nonce);\n  const nftContract = contract; //the transaction\n\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 5000000,\n    maxPriorityFeePerGas: 1999999987,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI()\n  };\n  const signature = await web3.eth.personal.sign(\"Your code gonna be a NFT!\", PUBLIC_KEY, \"\" // MetaMask will ignore the password argument here\n  ); // const signedTx = await web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);\n\n  const transactionReceipt = await web3.eth.sendTransaction( // signedTx.rawTransaction\n  tx);\n  console.log(`Transaction receipt: ${JSON.stringify(transactionReceipt)}`);\n}","map":{"version":3,"sources":["/Users/wengyifan/Desktop/dsdn/dsdn/src/contracts/interact.js"],"names":["abi","contractABI","require","contractAddress","createAlchemyWeb3","alchemyKey","web3","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","getCurrentWalletConnected","length","loadContract","eth","Contract","mintNFT","tokenURI","contract","PUBLIC_KEY","nonce","getTransactionCount","console","log","nftContract","tx","from","to","gas","maxPriorityFeePerGas","data","methods","encodeABI","signature","personal","sign","transactionReceipt","sendTransaction","JSON","stringify"],"mappings":"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","sourcesContent":["const { abi: contractABI } = require(\"./MyNFT.json\");\nconst contractAddress = \"0xaC76Ac9995eb52AaDA526F53333942E49eC9A206\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst alchemyKey =\n  \"https://polygon-mumbai.g.alchemy.com/v2/r4_cc2y9NtTPYRpExJKFHpx_G28fzFsW\";\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport async function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nexport async function mintNFT(tokenURI, contract, PUBLIC_KEY) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\"); //get latest nonce\n  console.log(nonce);\n\n  const nftContract = contract;\n  //the transaction\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 5000000,\n    maxPriorityFeePerGas: 1999999987,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  };\n\n  const signature = await web3.eth.personal.sign(\n    \"Your code gonna be a NFT!\",\n    PUBLIC_KEY,\n    \"\" // MetaMask will ignore the password argument here\n  );\n\n  // const signedTx = await web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);\n  const transactionReceipt = await web3.eth.sendTransaction(\n    // signedTx.rawTransaction\n    tx\n  );\n\n  console.log(`Transaction receipt: ${JSON.stringify(transactionReceipt)}`);\n}\n"]},"metadata":{},"sourceType":"module"}